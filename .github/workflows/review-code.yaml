name: Review PR Diff

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - edited

jobs:
  reviewmycode:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the PR code
      - name: Checkout PR Code
        uses: actions/checkout@v2

      # Step 2: Fetch all history for diff
      - name: Fetch All History for Diff
        run: git fetch --all

      # Step 3: Get PR Diff and File Paths with Context
      - name: Get PR Diff with Context
        id: diff
        run: |
          echo "Getting PR diff with 3 lines of context"
          git diff -U3 origin/${{ github.event.pull_request.base.ref }}...origin/${{ github.event.pull_request.head.ref }} > diff.txt
          git diff --name-only origin/${{ github.event.pull_request.base.ref }}...origin/${{ github.event.pull_request.head.ref }} > file_paths.txt

      # Step 4: Filter out non-code files from file_paths.txt
      - name: Filter Non-Code Files
        id: filter_files
        run: |
          # Remove any non-code files (e.g., config, doc files)
          grep -E '\.(java|kt|js|ts|py)$' file_paths.txt > filtered_file_paths.txt

      # Step 5: Echo Diff and Filtered File Paths
      - name: Echo Diff and Filtered File Paths
        run: |
          echo "Diff content:"
          cat diff.txt  # Output the content of diff.txt
          echo "Filtered File paths:"
          cat filtered_file_paths.txt  # Output the filtered content of file_paths.txt

      # Step 6: Send PR Diff and Filtered File Paths to Backend for Review
      - name: Send Diff and Filtered File Paths to Backend for Review
        run: |
          diff_content=$(cat diff.txt | jq -Rsa .)
          file_paths=$(cat filtered_file_paths.txt | jq -Rsa .)

          echo "Sending PR Diff for Review"
          curl -X POST "https://app5-latest.onrender.com/openai/api/v2/strategy/4/review-pr-diff" \
          -H "Content-Type: application/json" \
          -d '{
            "diff": '"$diff_content"',
            "owner": "${{ github.repository_owner }}",
            "repo": "${{ github.event.pull_request.head.repo.name }}",
            "prNumber": "${{ github.event.pull_request.number }}",
            "commitId": "${{ github.event.pull_request.head.sha }}",
            "file_paths": '"$file_paths"'
          }'
